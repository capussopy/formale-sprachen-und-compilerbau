import java_cup.runtime.*;
import instruction.*;
import enumeration.*;
import java.util.ArrayList;
import java.math.BigDecimal;



terminal        BigDecimal              NUMBER;
terminal        String                  NAME;
terminal                                PLUS, MINUS, MULTIPLY, DIVIDE;
terminal                                SET, AS, IF, ELSE, WHILE, FUNCTION, PARAMS, FUNCTION_CALL, FUNCTION_PARAMS;
terminal                                EQ, EQEQ, LT, GT, LTEQ, GTEQ, NOTEQ;
terminal                                LPAREN, RPAREN, DOT, STRING_LITERAL;

non terminal    ArrayList<Instruction> ASSIGNMENT_LIST;
non terminal    Instruction            PROGRAM;
non terminal    Instruction            VALUE;
non terminal    Instruction            VARIABLE_ASSIGMENT;
non terminal    Instruction            OPERATION;



start with PROGRAM;


PROGRAM             ::= ASSIGNMENT_LIST:al                              {: RESULT = new InstructionProgram(al); :};

ASSIGNMENT_LIST     ::=                                                 {:  RESULT = new ArrayList<Instruction>(); :}
                        | ASSIGNMENT_LIST:al VARIABLE_ASSIGMENT:va      {:  RESULT = al;RESULT.add(va); :}
                        | ASSIGNMENT_LIST:al OPERATION:o                {:  RESULT = al;RESULT.add(o); :};

VALUE               ::= NUMBER:n                                        {: RESULT = new InstructionNumber(n); :}
                        | NAME:n                                        {: RESULT = new InstructionVariableGet(n); :} ;


VARIABLE_ASSIGMENT  ::= SET VALUE:v AS NAME:n                           {: RESULT = new InstructionVariableSet(n, v); :};

OPERATION           ::= VALUE:v                                         {: RESULT = v; :}
                    | VALUE:l PLUS VALUE:r                              {: RESULT = new InstructionBinaryOperation(BinaryOperator.PLUS, l, r); :}
                    | VALUE:l MINUS VALUE:r                             {: RESULT = new InstructionBinaryOperation(BinaryOperator.MINUS, l, r); :}
                    | VALUE:l MULTIPLY VALUE:r                          {: RESULT = new InstructionBinaryOperation(BinaryOperator.MULTIPLY, l, r); :}
                    | VALUE:l DIVIDE VALUE:r                            {: RESULT = new InstructionBinaryOperation(BinaryOperator.DIVIDE, l, r); :};






