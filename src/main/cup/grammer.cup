import java_cup.runtime.*;
import instruction.*;
import enumeration.*;
import java.util.ArrayList;
import java.math.BigDecimal;


terminal        BigDecimal              NUMBER;
terminal        String                  NAME;
terminal                                PLUS, MINUS, MULTIPLY, DIVIDE;
terminal                                EQUAL, LOWER, GREATER, LOWER_OR_EQUAL, GREATER_OR_EQUAL, NOT_EQUAL;
terminal                                LBRACK, RBRACK, STRING_LITERAL;
terminal                                SET, AS;
terminal                                IN_CASE_THAT, FALLBACK;
terminal                                AS_LONG_AS;
terminal                                FUNCTION, PARAMS, FUNCTION_CALL, FUNCTION_PARAMS;


non terminal    ArrayList<Instruction> EXPRESSION_LIST;
non terminal    Instruction            PROGRAM, BLOCK;
non terminal    Instruction            VALUE;
non terminal    Instruction            VARIABLE_SET;
non terminal    Instruction            OPERATION;
non terminal    Instruction            CONDITIONAL, CONDITION;
non terminal    Instruction            LOOP;

precedence left PLUS, MINUS;
precedence left DIVIDE, MULTIPLY;

start with PROGRAM;


PROGRAM             ::= EXPRESSION_LIST:el                              {: RESULT = new InstructionProgram(el); :};
BLOCK               ::= LBRACK PROGRAM:p RBRACK                         {: RESULT = p; :};

EXPRESSION_LIST     ::=                                                 {:  RESULT = new ArrayList<Instruction>(); :}
                        | EXPRESSION_LIST:el VARIABLE_SET:va            {:  RESULT = el;RESULT.add(va); :}
                        | EXPRESSION_LIST:el VALUE:v                    {:  RESULT = el; RESULT.add(v); :}
                        | EXPRESSION_LIST:el CONDITION:c                {:  RESULT = el; RESULT.add(c); :}
                        | EXPRESSION_LIST:el CONDITIONAL:c              {:  RESULT = el;RESULT.add(c); :}
                        | EXPRESSION_LIST:el LOOP:l                     {:  RESULT = el; RESULT.add(l); :};



VALUE               ::= NUMBER:n                                        {: RESULT = new InstructionNumber(n); :}
                        | NAME:n                                        {: RESULT = new InstructionVariableGet(n); :}
                        | OPERATION:o                                   {: RESULT = o; :};

OPERATION           ::= VALUE:l PLUS VALUE:r                          {: RESULT = new InstructionNumberOperation(BinaryOperator.PLUS, l, r); :}
                        | VALUE:l MINUS VALUE:r                         {: RESULT = new InstructionNumberOperation(BinaryOperator.MINUS, l, r); :}
                        | VALUE:l MULTIPLY VALUE:r                      {: RESULT = new InstructionNumberOperation(BinaryOperator.MULTIPLY, l, r); :}
                        | VALUE:l DIVIDE VALUE:r                        {: RESULT = new InstructionNumberOperation(BinaryOperator.DIVIDE, l, r); :};



VARIABLE_SET        ::= SET VALUE:v AS NAME:n                           {: RESULT = new InstructionVariableSet(n, v); :};



CONDITIONAL        ::= IN_CASE_THAT CONDITION:c BLOCK:b                     {: RESULT = new InstructionConditional(c, b); :}
                   | IN_CASE_THAT CONDITION:c BLOCK:b FALLBACK BLOCK:b2     {: RESULT = new InstructionConditional(c,b,b2); :};

CONDITION          ::= VALUE:l EQUAL VALUE:r                                {: RESULT = new InstructionBooleanCondition(l, Condition.EQUAL ,r); :}
                     | VALUE:l LOWER VALUE:r                                {: RESULT = new InstructionBooleanCondition(l, Condition.LOWER ,r); :}
                     | VALUE:l GREATER VALUE:r                              {: RESULT = new InstructionBooleanCondition(l, Condition.GREATER, r); :}
                     | VALUE:l LOWER_OR_EQUAL VALUE:r                       {: RESULT = new InstructionBooleanCondition(l, Condition.LOWER_OR_EQUAL, r); :}
                     | VALUE:l GREATER_OR_EQUAL VALUE:r                     {: RESULT = new InstructionBooleanCondition(l, Condition.GREATER_OR_EQUAL, r); :}
                     | VALUE:l NOT_EQUAL VALUE:r                            {: RESULT = new InstructionBooleanCondition(l, Condition.NOT_EQUAL, r); :};


LOOP              ::= AS_LONG_AS CONDITION:c BLOCK:b                        {: RESULT = new InstructionLoop(c, b); :};


